

import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, SeparableConv2D, DepthwiseConv2D, Dropout
from keras.layers import MaxPooling2D, AveragePooling2D, GlobalMaxPooling2D, GlobalAveragePooling2D
from keras.layers import Embedding, Bidirectional, GlobalAveragePooling1D
from transformer import TokenAndPositionEmbedding, TransformerBlock
from keras import regularizers
from keras import metrics
from keras import callbacks
from keras.datasets import reuters
from apscheduler.schedulers.background import BackgroundScheduler
import pickle
import psutil
import time

'''
process = psutil.Process()

mcpu = 0
mmem = 0

def get_info():
    global mmem
    mem = process.memory_info().rss
    if mmem < mem:
        mmem = mem

scheduler = BackgroundScheduler()
scheduler.add_job(get_info, 'interval', seconds=1)
'''

data_augmentation = True


############################################################

### Load x training data.
with open( '/exports/home/j_liu21/projects/genetic_algorithms/x_train.pkl', 'rb' ) as x_train_pkl_file:
    x_train = pickle.load( x_train_pkl_file, encoding='latin1' )

# vocab_size = 20000  # Only consider the top 20k words
# maxlen = 200  # Only consider the first 200 words of each movie review
# (x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=vocab_size)

############################################################
x_train_data_len = len(x_train)
x_train_train = x_train[0:10000]
x_train_valid = x_train[10000:20000]
############################################################

### Load y training data.
with open( '/exports/home/j_liu21/projects/genetic_algorithms/y_train.pkl', 'rb' ) as y_train_pkl_file:
    y_train = pickle.load( y_train_pkl_file, encoding='latin1' )

############################################################
y_train_train = y_train[0:10000]
y_train_valid = y_train[10000:20000]
############################################################

### Load x testing data.
with open( '/exports/home/j_liu21/projects/genetic_algorithms/x_test.pkl', 'rb' ) as x_test_pkl_file:
    x_test = pickle.load( x_test_pkl_file, encoding='latin1' )

### Load y testing data.
with open( '/exports/home/j_liu21/projects/genetic_algorithms/y_test.pkl', 'rb' ) as y_test_pkl_file:
    y_test = pickle.load( y_test_pkl_file, encoding='latin1' )

# Convert class vectors to binary class matrices.
y_train_train = keras.utils.to_categorical( y_train_train, num_classes )
y_train_valid = keras.utils.to_categorical( y_train_valid, num_classes )
y_test = keras.utils.to_categorical( y_test, num_classes )

model = Sequential()
